apply plugin: 'com.android.application'


// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
if (keystorePropertiesFile.canRead()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

/* gets the version name from the latest Git tag, stripping the leading v off */
def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'cmd', 'git', 'describe', '--tags', '--always'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

android {
   signingConfigs {
        release {
            if (keystorePropertiesFile.canRead()) {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
    }

    compileSdkVersion 29
    buildToolsVersion '29.0.0'
    defaultConfig {
        applicationId "com.RWTech.Freedom"
        versionName "Freedom_10.0.18362"
        resConfigs "bo", "af", "am", "ar", "ay", "az", "bg", "bn", "ca", "cs", "da", "el", "es", "et", "eu", "fa", "fi", "gl", "hi", "hr", "hu", "hy", "in", "hy", "in", "is", "it", "iw", "ka", "kk", "km", "kn", "ky", "lo", "lt", "lv", "mk", "ml", "mn", "mr", "ms", "my", "nb", "ne", "nl", "pl", "pt", "rm", "ro", "ru", "si", "sk", "sl", "sn", "sr", "sv", "sw", "ta", "te", "th", "tl", "tr", "uk", "ur", "uz", "vi", "zu", "en", "fr", "de", "it", "ja", "ko", "zh"
        minSdkVersion 18
        targetSdkVersion 29
    }
    aaptOptions {
        cruncherEnabled = false
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.release
        }
    }

    aaptOptions {
        cruncherEnabled = false
    }

    flavorDimensions "free"

    productFlavors {
        fullperm {
            dimension "free"
            minSdkVersion 18
            applicationId 'com.RWTech.Freedom'
            targetSdkVersion 29
            versionCode 16131002
            versionName "Freedom_10.0.18362"
            archivesBaseName = "Freedom"
        }
        appmax {
            dimension "free"
            minSdkVersion 18
            applicationId 'com.RWTech.Freedom.max'
            targetSdkVersion 29
            versionCode 16131002
            versionName "Freedom_10.0.18362"
            archivesBaseName = "FreedomMAX"
        }
    }

    splits {

        // Configures multiple APKs based on ABI. This helps keep the size down, since PT binaries can be large.
        abi {

            // Enables building multiple APKs per ABI.
            enable true

            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86 and x86_64.

            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()

            // Specifies a list of ABIs that Gradle should create APKs for.
            include "x86", "armeabi-v7a", "x86_64", "arm64-v8a"

            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
            universalApk false
        }


    }

}


dependencies {
    implementation project(':orbotservice')
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'pl.bclogic:pulsator4droid:1.0.3'
    implementation 'com.github.apl-devs:appintro:v4.2.2'
    implementation 'com.github.javiersantos:AppUpdater:2.7'
    androidTestImplementation "tools.fastlane:screengrab:1.2.0"
}

// Map for the version code that gives each ABI a value.
ext.abiCodes = ['armeabi-v7a':'1', 'arm64-v8a':'2', 'mips':'3', 'x86':'4', 'x86_64':'5']

import com.android.build.OutputFile

// For each APK output variant, override version code of outputs based on ABI codes
// ex) 'mips' -> 3xxx
// ex) 'x86' -> 4xxx
android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def baseVersionCode = project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))
        if (baseVersionCode != null) {
            output.versionCodeOverride = Integer.valueOf(baseVersionCode + variant.versionCode)
        }
    }
}

